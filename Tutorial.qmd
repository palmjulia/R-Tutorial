---
title: "Tutorial R & fhircrackr"
date: "9. November 2022"
format: 
  revealjs:
    theme: dark
    incremental: true
    preview-links: auto
knitr:
  opts_chunk: 
    echo: true
---

<!-- https://quarto.org/docs/reference/formats/presentations/revealjs.html -->

# 0 Vorwort

## Programm 

:::: {.columns}

::: {.column width="50%"}
::: {.nonincremental}
1) Intro
2) Datentypen
3) Interaktionen mit dem Filesystem
4) Arbeit mit Tabellen
:::
:::

::: {.column width="50%"}
::: {.nonincremental}
5) fhircrackr: Download von Daten
6) fhircrackr: Verflachen von Daten
7) Beispielanalyse
:::
:::
:::

:::{.callout-note}
Mittagspause 12-13 Uhr

Kleinere Pausen nach Bedarf
:::

## R Philosophie: Vorbemerkung für Kenner
- Für diesen Kurs verwenden wir ausschließlich base R Funktionen (abgesehen von `fhircrackr`)
- Viele der vorgestellten Prinzipien sind schneller, eleganter und effizienter in verschiedenen Paketen implementiert
- Wir wollen uns hier aber nicht in Grabenkämpfe zwischen rivalisierenden Paradigmen verwickeln ;-)

# 1 Intro

## Was ist R?

-   Statistik Software und Programmiersprache
-   1995 von R. Gentleman und R. Ihaka entwickelt
-   Open source: [http://www.r-project.org](http://www.r-project.org) ![](images/rlogo.png){width="100"}
-   Am besten mit passender IDE zu verwenden ![](images/RStudio.png){width="100"}

## Aufbau

-   Bei Installation von R erhält man das sog. *base R*, das alle wichtigsten und grundsätzlichen Funktionalitäten enthält
-   Zusätzliche Funktionen können als R-Pakete innerhalb der Session nachinstalliert werden.
-   Jeder kann R-Pakete schreiben und zur Verfügung stellen.
-   Zentrale Sammelstelle für R-Pakete ist das \*Comprehensive R Archive Network" ([CRAN](https://cran.r-project.org/))
- Publikation auf CRAN erfordert einen Mindeststandard an technischer Qualität (keine inhaltliche Richtigkeit!) und ist einem Review-Prozess unterworfen.

## Tutorial Setup
Vorbedingungen: 

- Git Repository geclont: `git clone https://github.com/palmjulia/R-Tutorial.git`
- Verzeichniswechsel ins lokale Repository `cd R-Tutorial/docker`
- Docker Image gepullt mit `docker-compose pull`

. . .

::: {.callout-warning}
Sollte schon passiert sein!
:::

## Tutorial Setup
Für heute:

- Diese Folien liegen im geclonten Repository unter *Tutorial.html*
- Verzeichniswechsel ins lokale Repository `cd R-Tutorial/docker`
- RSudio-Server starten mit `docker-compose up -d`
- RStudio im Browser öffnen unter [127.0.0.1:8787](http://127.0.0.1:8787)
- Username: `rstudio`, Passwort: `pwd` 


## RStudio

Wir schauen uns gemeinsam RStudio an.

## Code ausführen

-   In seiner einfachsten Funktion kann R wie ein Taschenrechner verwendet werden
-   Zeilen können einzeln nacheinander oder im Block ausgeführt werden

. . . 

``` {.r code-line-numbers="1|2|3|1-3"}
1+3
4/2
3*5^7/(9-2)
```

::: callout-tip
Code markieren und `Strg + Enter` drücken.
:::

## Kommentieren

-   Mit `#` können Zeilen auskommentiert werden:

. . .

```{.r}
#10-4
```

::: callout-tip
Keyboard-Shortcut `Strg + Shift + c`
:::

## Zuweisungen

-   Allen R-Objekten können Namen zugewiesen werden
-   Namen dürfen nicht mit einer Zahl beginnen und sollten keine Sonderzeichen enthalten

. . . 

```{.r}
#Zuweisung
x <- 3
irgendeinLangerName <- 7+2
```

. . .

-   Der Aufruf erfolgt durch "Ausführen" des Namens

. . .

```{.r}
#Aufruf
x
irgendeinLangerName
irgendeinLangerName + x 
```

## Environment

-   Sämtliche aktell definierten Variablen finden sich im RStudio-Fenster "Environment" in der rechten oberen Ecke der IDE
-   Einmal definierte Variablen können durch erneute Zuweisung überschrieben werden
-   Auflisten aller Environment-Elemente über `ls()`
-   Löschen einzelner Objekte aus dem Environment über `rm(...)`
-   Löschen aller Objekte über `rm(list=ls())`

## Environment

``` {.r code-line-numbers="1|2|3|4|5"}
x <- 3
x <- 4
ls()
rm(x)
rm(list=ls())
```

# 2 Datentypen

## Vektoren

-   Grundbaustein sämtlicher Datenstrukturen in R
-   Enthalten nur gleichartige Elemente
-   Können mit Namen versehen werden
-   Selbst Skalare sieht R als Vektoren der Länge 1

## Vektoren

``` {.r code-line-numbers="1-3|5-7|9-10|12-14|16-17|19-20"}
#unnamed vector
x <- c(4,5,1)
x

#named vector
y <- c(a=7, b=3, c=2)
y

#Länge bestimmen
length(x)

#Einzelnes Element aufrufen
x[2]
y["c"]

#mehrere Elemente aufrufen
x[c(1,3)]

#typ bestimmen
class(x)
```

## Vektorentypen

-   **numeric**: Zahlenformat mit Unterklassen "double" (default) und "integer" (für Kompatibilität mit C und Fortran)
-   **character**: Für Strings
-   **logical**: Für Boolsche Werte

. . .

``` {.r code-line-numbers="1-3|4-7|8-12"}
#character
char <- c("apple", "banana")
class(char)
#Einzelner Buchstabe ist auch nur character vector Länge 1
letter <- "a"
class(letter)
length(letter)
#Logical
log1 <- c(TRUE, FALSE, TRUE)
log2 <- c(T, T, F)
log3 <- c(1<2, "A"=="B", 3!=5)
class(log1)
```

## Rechnen mit Vektoren

-   Mit **numeric** Vektoren kann R rechnen
-   Mit **logical** Vektoren einfache logische Operationen ausführen

. . .

``` {.r code-line-numbers="1-4|5-7"}
# einfache Mathematik
x + y
x/y
x^y
# einfache Logik
log1 & log2
log1 | log2
```

## Listen

-   Können beliebige, verschiedene Datentypen als Elemente enthalten
-   Elemente können mit Namen versehen werden
-   Subsetting kann entweder das Element selbst, oder eine Teilliste zurückgeben

## Listen

``` {.r code-line-numbers="1-4|6-8|10-11|13-14|16-18"}
#unnamed list
l1 <- list(1, "a", c(TRUE, TRUE), list(1,"x"))
class(l1)
length(l1)

#named list
l2 <- list(zahl = 1, buchstabe = "a", vektor = c(TRUE, TRUE), liste = list(1,"x"))
names(l2)

#gib 3. Element als Teilliste zurück
l1[3]

#gib 3. Element selbst zurück
l1[[3]]

#mit Namen indizieren
l2["buchstabe"]
l2[["buchstabe"]]
```

## Data.frames
-   Basales Tabellenformat
-   Im Kern eine Liste, die aus Vektoren identischer Länge besteht

. . .

``` {.r code-line-numbers="1-5|6-7|8-9|10-12|14-16"}
#Erzeugung
d <- data.frame(name = c("Joe", "Ann", "Max"),
                age = c(43, 37, 12),
                sex = c("male", "female", "male")
                )
#Aufruf in Konsole
d

#Aufruf in Viewer
View(d)
```

# 3 Interaktionen mit dem Filesystem

## Vorbereitung
```{.r}
#### Vorbereitung #####
#Environment bereinigen
rm(list=ls())
```

## Working directory
- Jede R-Session ist mit einem Working directory assoziiert. 
- Werden in Interaktionen mit dem Filesystem relative Pfade angegeben, so wird dieses Working directory als root interpretiert

. . .

```{.r code-line-numbers="1-2|4-5|6|8-9"}
#aktuelles Working directory abrufen
getwd()

#anderes working directory setzen
setwd(dir = "data")
getwd()

#wieder zurück zum Ursprung
setwd("..")
```

## Daten einlesen
-   Einlesen sämtlicher gängiger Datenformate mit passendem Paket möglich
-   Base R enthält Funktionen zum Einlesen von Textbasierten Formaten

. . .

```{.r code-line-numbers="1-3|4-6"}
#csv Datei einlesen
data1 <- read.csv(file = "data/data1.csv")
View(data1)
#tabstopp getrennte Daten einlesen
data2 <- read.table(file = "data/data2.txt", sep = "\t", header = TRUE)
View(data2)
```

. . .

::: callout-tip
`?read.table` ruft die Hilfe auf, Keyboardtaste `Tab` innerhalb eines Funktionsaufrufs lässt RStudio Vorschläge für Argumente oder Werte machen. 
:::

## Daten abspeichern
- Zu jeder `read.xxx` Funktion gibt es in der Regel eine `write.xxx` Funktion
- Eine Liste von Dateien in einem Verzeichnis lässt sich über `dir()` ausgeben

. . .

```{.r code-line-numbers="1-2|4-5|7-8"}
#data Verzeichnis listen
dir("data")

#Tabelle abspeichern
write.csv(x = data1, file = "data/my_data1.csv")

#data Verzeichnis listen
dir("data")
```

## R-spezifische Speicherformate
- Beliebige R Objekte können als **.RData**/**.rda** oder **.rds** gespeichert werden.

. . .

```{.r code-line-numbers="1-2|3-4|6-7|9-11"}
#Einzelnes Objekt speichern
save(data1, file = "data/data1.RData")
#gesamten working space speichern
save.image(file = "data/alldata.RData")

#working space löschen
rm(list=ls())

#Daten wieder einlesen
load("data/data1.RData")
load("data/alldata.RData")
```

# 4 Arbeit mit Tabellen
## Subsetting
- Spalten können über Position und Namen ausgewählt werden
- Zeilen können über Position und logische Bedingungen ausgwählt werden

. . .

```{.r code-line-numbers="1-3|5-6|8-19"}
#Spalten auswählen
data1[, c(1,3)]
data1[, c("age", "id")]

#Einzelne Variable als Vektor aufrufen
data1$weight

#Zeilen auswählen
data1[c(1,3), ]
data1[data1$age > 40, ]
```

## Spaltennamen ändern 
- Spaltennamen können über `colnames()` angezeigt und verändert werden

. . .

```{.r code-line-numbers="1-2|4-5|7-9"}
#alle Spaltennamen anzeigen
colnames(data2)

#einzelner Spaltenname
colnames(data2)[3]

#neuen Wert zuweisen
colnames(data2)[3] <- "id"
colnames(data2)
```


## Faktoren
- R's Datentyp für kategoriale Variablen
- Im Gegensatz zu **character** für Vektoren/Variablen, die ein festes Set an Werten haben
- Levels können geordnet oder ungeordnet sein

. . .

```{.r code-line-numbers="1-4|5-9|10-11"}
#unordered
gender <- factor(x = c("male", "female", "female"),
              levels = c("female", "male", "diverse"))
gender
#ordered
dose <- factor(x = c("high", "high", "medium", "high"),
               levels = c("low", "medium", "high"),
               ordered = TRUE)
dose
#structure
str(dose)
```

## Datentypen umwandeln
- Typenkonvertierung in der Regel über passende `as.xxx` Funktion
- Variablen in bestehenden Tabellen können durch Zuweisung überschrieben werden

. . .

```{.r code-line-numbers="1-2|3-4|6-8|9-10"}
#Könnte ein Faktor sein
data2$eyecolor
#Aber kein numeric
as.numeric(data2$eyecolor)

#Im Datensatz zu Faktor machen
as.factor(data2$eyecolor)
data2$eyecolor <- as.factor(data2$eyecolor)
#Jetzt sind intern numerische Levels hinterlegt
as.numeric(data2$eyecolor)
```

## Datentypen umwandeln
- Scheinbar numerische Variablen wie IDs *sollten* in character Vektoren umgewandelt werden um später falsches Handling zu vermeiden

. . .

```{.r code-line-numbers="1-3|5-7|9-11"}
#Mit id sollte man nicht rechnen können
class(data2$id)
mean(data2$id)

#Umwandlung in character
data1$id <- as.character(data1$id)
data2$id <- as.character(data2$id)

#Jetzt lässt R nicht mehr rechnen
data1$id
mean(data1$id)
```

## Neue Variablen erstellen
- Über Zuweisung können einfach neue Variablen erstellt werden
- Zu kurze Vektoren werden dabei recycelt

. . .

```{.r code-line-numbers="1-3|5-6|7-8"}
#Variable mit 0 initialisieren
data2$blueEyes <- 0
data2

#An den richtigen Stellen 1 einsetzen
data2[data2$eyecolor=="blue",]
data2[data2$eyecolor=="blue",]$blueEyes <- 1
data2
```

## Datensätze mergen
- Extra Pakete, z.B. `data.table`/`tibble`
- Base R Variante für einfache Standard-Varianten

. . .

```{.r code-line-numbers="1-5|6-10|11-15"}
#Inner join
merge(x = data1, 
      y = data2,
      by = "id",
      all = FALSE)
#Full join
merge(x = data1, 
      y = data2,
      by = "id",
      all = TRUE)
#Left join
merge(x = data1, 
      y = data2,
      by = "id",
      all.x = TRUE)
```

## Vektorrechnung in der Variablenerstellung
- Erstellung neuer Variablen aus Berechnungen bestehender Variablen
- Durch R's vektorisierte Rechenoperationen schnell und unkompliziert

. . .


```{.r code-line-numbers="1-5|6-7|8"}
#Vollen Datensatz erstellen
data <- merge(x = data1, 
              y = data2,
              by = "id",
              all = TRUE)
#BMI berechnen
data$BMI <- data$weight/(data$height/100)^2
data
```

# 5 fhircrackr: Download von Daten

## Vorbereitung
```{.r}
#### Vorbereitung #####
#Environment bereinigen
rm(list=ls())
```

## Intro
- In der MII entwickeltes R-Paket zum Verarbeiten von FHIR Ressourcen
- Stabile Version auf [CRAN](https://cran.r-project.org/web/packages/fhircrackr/index.html), Development auf [GitHub](https://github.com/POLAR-fhiR/fhircrackr)
- Sehr ausführliche Doku in den Vignetten 

. . .

```{.r code-line-numbers="1-2|4-5|7-8"}
#erste Installation (für den Kurs nicht nötig)
#install.packages("fhircrackr")

#Paket laden (1x pro R Session)
library(fhircrackr)

#Vignetten anschauen
??fhircrackr
```

## Exkurs: S4 Klassen
- Eines von R's objektorientierten Systemen
- Definiert formale Klassen mit vorgegebener Struktur, Vererbung und passenden Methoden
- Für jede Klasse ist (i.d.R.) eine print-Funktion definiert, die die relevanten Informationen an den User kommuniziert

## Exkurs: S4 Klassen
```{.r code-line-numbers="1-2|4-8|10-13"}
#Beispiel fhir_url
?fhir_url

#Konstruktor aufrufen
request <- fhir_url(url = "https://mii-agiop-3p.life.uni-leipzig.de/fhir",
                    resource = "Patient",
                    parameters = c(gender = "female",
                                   birthdate = "ge1990"))

#Objekt inspizieren
request
class(request)
str(request)
```

## Ressourcen herunterladen per GET
```{.r code-line-numbers="1-3|5-6|8-10"}
#Download
bundles <- fhir_search(request = request,
                       max_bundles = 2)

#Ergebnis
bundles

#einzelnes Bundle
bundles[[1]]
cat(toString(bundles[[1]]))
```

## Ressourcen herunterladen per GET
- Funktion `fhir_search()` führt FHIR Search Request inklusive automatischem Paging aus
- Optionale Parameter:
  - `max_bundles` begrenzt Anzahl der Bundles im Paging
  - `username`, `password` und `token` für Authentifizierung
  - `delay_between_attempts` und `delay_between_bundles` steuern Wartezeit zwischen Verbindungsversuchen
  - `save_to_disc` speichert Bundles auf Platte statt in R-Session
  - `rm_tag` definiert html/xml-tags, die direkt nach Download gelöscht werden sollen
  
## Ressourcen herunterladen per POST
- Für besonders lange Search Requests ist manchmal nur eine Suche per POST möglich
- z.B. wenn viele lange IDs an den Suchparameter `_id` übergeben werden sollen

. . .

```{.r code-line-numbers="1-2|4-7|9-12"}
request <- fhir_url(url = "https://mii-agiop-3p.life.uni-leipzig.de/fhir",
                    resource = "Patient")

#body definieren
body <- fhir_body(content = list(gender = "female",
                                 birthdate = "ge1990"))
body

#download
bundles <- fhir_search(request = request,
                       body = body,
                       max_bundles = 2)
```

## Umgang mit HTTP-Fehlern
- Quellen: Authentifizierung, Tippfehler in der URL, nicht implementierte Parameter...
- Mit Argument `log_errors = <file>` in spezifierte Datei schreiben lassen
- Über `fhir_recent_http_error()` den zuletzt geworfenen Fehler aufrufen

. . .


```{.r code-line-numbers=""}
#Fehlende Authentifizierung
fhir_search("https://mii-agiop-polar.life.uni-leipzig.de/fhir/Patient")

#Fehler aufrufen
cat(fhir_recent_http_error())

#Falscher Suchparameter
fhir_search("https://mii-agiop-3p.life.uni-leipzig.de/fhir/Observation?gender=female",
            log_errors = "Observation_error.txt")
```


## Bundles Speichern und Laden
- Bundles können als xml-Files  gespeichert werden
. . .

```{.r code-line-numbers="1-2|1,4|1,6-8"}
### Als xml
fhir_save(bundles = bundles, directory = "PatientBundles")

rm(list = ls())

#laden
bundles <- fhir_load(directory = "PatientBundles")
bundles
```

## Bundles Speichern und laden
- Bundles können auch als .RData-Objekte gespeichert werden
- Speichern als .RData erfordert vorherige Serialisierung, da sonst External Pointer kaputt gehen


## Bundles Speichern und laden

```{.r code-line-numbers="1-4|1,6,7|1,9|1,11-14"}
### Als RData
#Serialize
bundles_serialized <- fhir_serialize(bundles)
bundles_serialized

#speichern
save(bundles_serialized, file = "PatientBundles/bundles.RData")

rm(list=ls())

#laden
load("PatientBundles/bundles.RData")
bundles <- fhir_unserialize(bundles_serialized)
bundles
```


# 6 fhircrackr: Verflachen von Daten

## Table Description
- Wird in Funktion `fhir_crack()` verwendet um Bundles in Tabellen umzuwandeln
- Definiert eine Vorschrift, wie FHIR Ressourcen in Tabellen überführt werden

## Table Description
- Für die einfachste Form muss nur der Ressourcentyp angegeben werden
- Alle anderen Eigenschaften erhalten dann Default-Werte
- Diese Form extrahiert alle vorhandenen FHIR-Elemente in Spalten

. . .

```{.r code-line-numbers="1-3|5-7"}
#Einfachste Form
pat_desc <- fhir_table_description(resource = "Patient")
pat_desc

#cracken
patients <- fhir_crack(bundles = bundles, design = pat_desc)
View(patients)
```

## Spaltenbeschreibung
- Einschränkung der zu extrahierenden Elemente über `cols` Element der Table Description
- Definition der Elemente über XPath (1.0) Expressions
- Spaltennamen können automatisch generiert oder frei gewählt werden

## Spaltenbeschreibung

```{.r code-line-numbers="1-5|6-8|10-14|15-17"}
#selbstgewählte Spaltennamen
pat_desc <- fhir_table_description(resource = "Patient",
                                   cols = c(Stadt = "address/city",
                                            Geschlecht = "gender"))
pat_desc
#cracken
patients <- fhir_crack(bundles = bundles, design = pat_desc)
View(patients)

#automatische Spaltennamen
pat_desc <- fhir_table_description(resource = "Patient",
                                   cols = c("address/city",
                                            "gender"))
pat_desc
#cracken
patients <- fhir_crack(bundles = bundles, design = pat_desc)
View(patients)
```

## Multiple Elemente
- FHIR Ressourcen können für das gleiche Element (z.B. `Patient.address`) mehrere Einträge haben

- Per default setzt der fhircrackr multiple Einträge in die gleiche Spalte (`format = "compact"`)

- Trennzeichen (`sep`) und geklammerte Indizes (`brackets`) erlauben genaue Rekonstruktion der ursprünglichen Struktur

## Multiple Elemente
```{.r code-line-numbers="1-3|5-11|13-20"}
#Beispielbundle verfügbar machen
bundles <- fhir_unserialize(example_bundles1)
cat(toString(bundles[[1]]))

#cracken ohne Indizes
pat_desc <- fhir_table_description(resource = "Patient",
                                   sep = " | ")
                                   
patients_compact <- fhir_crack(bundles = bundles, design = pat_desc)
                       
View(patients_compact)

#cracken mit Indizes
pat_desc <- fhir_table_description(resource = "Patient",
                                   sep = " | ",
                                   brackets = c("[", "]"))
                                   
patients_compact <- fhir_crack(bundles = bundles, design = pat_desc)
                       
View(patients_compact)
```

## Wide format
- Alternativ zum kompakten Format können multiple Elemente auch über mehrere Spalten verteilt werden
- Mit `format="wide"` müssen zwingend `brackets` angegeben werden.

. . .


```{.r}
pat_desc <- fhir_table_description(resource = "Patient",
                                   brackets = c("[", "]"),
                                   format = "wide")

patients_wide <- fhir_crack(bundles = bundles, design = pat_desc)

View(patients_wide)
```

## Melting
- Statt über Spalten, können multiple Elemente können auch über mehrere Zeilen verteilt werden
- Ein *melt*-Prozess wird immer nur für *ein* FHIR-Element auf einmal durchgeführt
- Bei verschachtelten Elementen werden die Ebenen dabei stufenweise abgebaut

## Melting

```{.r code-line-numbers="1-2|1-3|1-4|1-5|1-6|1-7"}
### melt name
patients_long <- fhir_melt(patients_compact, 
                           columns = "name.given",
                           brackets = c("[", "]"),
                           sep = " | ",
                           all_columns = T)
View(patients_long)
```

## Melting

```{.r code-line-numbers="1-4|6-12|14-16"}
### melt address
#columns to expand
cols <- fhir_common_columns(patients_long, column_names_prefix = "address")
cols

#melt
patients_long <- fhir_melt(patients_long, 
                           columns = cols,
                           brackets = c("[", "]"),
                           sep = " | ",
                           all_columns = TRUE)
View(patients_long)

#remove indices
patients_long <- fhir_rm_indices(patients_long, brackets = c("[", "]"))
View(patients_long)
```

## Weitere Optionen in der Table Description
- `rm_emtpy_cols`: Bestimmt ob Spalten, deren Element in keiner einzigen Ressource vorkam, gelöscht werden
- `keep_attr`: Bestimmt ob xml-Attributnamen erhalten bleiben

## Weitere Optionen in der Table Description

```{.r code-line-numbers="1-3|5-7|9-11"}
#Example Bundle mit verschiedenen Attributen
bundles <- fhir_unserialize(example_bundles4)
cat(toString(bundles[[1]]))

#Table description
medication_desc <- fhir_table_description(resource = "Medication",
                                          keep_attr = TRUE)

#crack
meds <- fhir_crack(bundles = bundles, design = medication_desc)
View(meds)
```

## Mehr als ein Ressourcentyp
- FHIR Bundles können mehr als einen Ressourcentyp enthalten
- `fhir_crack()` erzeugt grundsätzlich eine Tabelle pro Ressourcentyp
- Es können einzelne Tabellen mit mehrfachen Aufrufen von `fhir_crack()` erzeugt weden
- Es kann eine Liste von Tabellen mit einem einzigen Aufruf von `fhir_crack()` erzeugt werden

## Mehr als einen Ressourcentyp herunterladen

```{.r code-line-numbers="1-4|6|8-9"}
#Gemischtes Bundle herunterladen
request <- fhir_url(url = "https://mii-agiop-3p.life.uni-leipzig.de/fhir",
                    resource = "MedicationStatement",
                    parameters = c("_include" = "MedicationStatement:subject"))

bundles <- fhir_search(request = request, max_bundles = 5)

#Bundles enthalten MedicationStatements und Patients
cat(toString(bundles[[1]]))
```

## Mehr als einen Ressourcentyp cracken
```{.r code-line-numbers="1-3|5-7|9-11|13-15"}
#zwei table descriptions
pat <- fhir_table_description(resource = "Patient")
med <- fhir_table_description(resource = "MedicationStatement")

#zwei einzelne Tabellenobjekte
patients <- fhir_crack(bundles = bundles, design = pat)
medications <- fhir_crack(bundles = bundles, design = med)

#Stattdessen eine Liste von Tabellen erzeugen
design <- fhir_design(pat, med)
tables <- fhir_crack(bundles = bundles, design = design)

#inspizieren
View(tables$pat)
View(tables$med)
```

# 7 Beispielanalyse

## Praktische Übung
- Das gelernte soll nun in einer einfachen Beispielanalyse angewendet werden
- Fragestellung: "Wie hängen BMI und Bluthochdruck, als Nebendiagnose vergeben, zusammen?"
- Beantwortung anhand der fiktiven Beispieldaten auf https://mii-agiop-3p.life.uni-leipzig.de/fhir

## Praktische Übung
- Das Skript *7 Beispielanalyse.R* führt stückweise durch die notwendigen Schritte.
- Gruppenarbeit: Selbstständiges Bearbeiten der Teilaufgaben
- Wir gehen herum und helfen bei Fragen


## Ziel: Dieses Analyseergebnis sollte herauskommen

:::: {.columns}

::: {.column width="60%"}
![](images/bmi_and_hypertension.png)
:::

::: {.column width="40%"}
Ein Wilcoxon-Mann-Whitney-U-Test ergab keinen signifikanten Unterschied im BMI der Patienten mit vs. ohne Bluthochdruck als Komorbiditätsdiagnose [*W(16,21) = 146,6;* 

*p = 0.5196*]
:::

::::

# 8 Abschluss

## Materialien
- Sämtlicher Code, inklusive Präsentation ist verfügbar unter [https://github.com/palmjulia/R-Tutorial](https://github.com/palmjulia/R-Tutorial) 
- Bug reports / feature requests für den *fhircrackr* gerne unter [https://github.com/POLAR-fhiR/fhircrackr/issues](https://github.com/POLAR-fhiR/fhircrackr/issues) 
- Sonstiger Kontakt unter [julia.palm@med.uni-jena.de](mailto:julia.palm@med.uni.jena.de)

## Danke

... für die Aufmerksamkeit!